
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 25 21:57:36 CEST 2008
//----------------------------------------------------

package org.lqc.jxc;

import java_cup.runtime.*;
import org.lqc.jxc.types.*;
import org.lqc.jxc.tokens.*;
import org.lqc.util.PathID;
import java.util.List;
import java.util.Vector;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 25 21:57:36 CEST 2008
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\006\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\002\000\002\004\005\000\002\007\004" +
    "\000\002\007\003\000\002\011\003\000\002\011\002\000" +
    "\002\012\005\000\002\012\003\000\002\013\004\000\002" +
    "\010\010\000\002\014\003\000\002\014\004\000\002\015" +
    "\003\000\002\015\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\003\000" +
    "\002\033\005\000\002\033\004\000\002\033\004\000\002" +
    "\036\007\000\002\036\011\000\002\037\007\000\002\037" +
    "\013\000\002\037\013\000\002\040\004\000\002\040\005" +
    "\000\002\016\005\000\002\017\004\000\002\020\003\000" +
    "\002\020\005\000\002\021\003\000\002\021\005\000\002" +
    "\022\003\000\002\022\003\000\002\023\003\000\002\023" +
    "\005\000\002\024\003\000\002\024\005\000\002\025\003" +
    "\000\002\025\005\000\002\025\005\000\002\026\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\027\003\000\002\027\005\000\002\027" +
    "\005\000\002\030\003\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\031\003\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\032\003\000\002" +
    "\032\006\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\032\003\000\002\034\006\000\002\035\003" +
    "\000\002\035\005\000\002\003\003\000\002\003\005\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\052\ufffe\053\ufffe\001\002\000\006\052" +
    "\007\053\013\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\004\042\051\001\002\000\006\052" +
    "\uffff\053\uffff\001\002\000\006\002\001\053\013\001\002" +
    "\000\006\002\ufffb\053\ufffb\001\002\000\004\042\014\001" +
    "\002\000\004\007\015\001\002\000\006\010\ufff9\053\021" +
    "\001\002\000\004\010\025\001\002\000\006\005\ufff7\010" +
    "\ufff7\001\002\000\006\005\023\010\ufffa\001\002\000\004" +
    "\042\022\001\002\000\006\005\ufff6\010\ufff6\001\002\000" +
    "\004\053\021\001\002\000\006\005\ufff8\010\ufff8\001\002" +
    "\000\004\011\026\001\002\000\042\004\031\007\070\011" +
    "\026\022\046\023\036\027\061\036\032\037\057\040\054" +
    "\041\071\042\051\043\047\045\035\046\064\047\055\053" +
    "\043\001\002\000\006\002\ufff5\053\ufff5\001\002\000\044" +
    "\004\ufff4\007\ufff4\011\ufff4\012\ufff4\022\ufff4\023\ufff4\027" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\053\ufff4\001\002\000\046\004" +
    "\uffec\007\uffec\011\uffec\012\uffec\022\uffec\023\uffec\027\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\053\uffec\001\002\000\042" +
    "\004\uffb7\005\uffb7\010\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\034\uffb7\035\uffb7\001\002\000\044\004\031\007" +
    "\070\011\026\012\222\022\046\023\036\027\061\036\032" +
    "\037\057\040\054\041\071\042\051\043\047\045\035\046" +
    "\064\047\055\053\043\001\002\000\004\004\220\001\002" +
    "\000\004\007\200\001\002\000\024\007\070\022\046\023" +
    "\036\027\061\036\032\037\057\040\054\041\071\042\051" +
    "\001\002\000\010\004\uffda\005\uffda\010\uffda\001\002\000" +
    "\042\004\uffca\005\uffca\010\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\034\uffca\035\uffca\001\002\000\042\004\uffcd" +
    "\005\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\160\025\157\026\156" +
    "\034\uffcd\035\uffcd\001\002\000\046\004\ufff2\007\ufff2\011" +
    "\ufff2\012\ufff2\022\ufff2\023\ufff2\027\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\053\ufff2\001\002\000\004\042\170\001\002" +
    "\000\034\004\uffd2\005\uffd2\010\uffd2\014\uffd2\015\uffd2\016" +
    "\146\017\153\020\150\021\147\022\151\023\152\034\uffd2" +
    "\035\uffd2\001\002\000\020\004\uffd5\005\uffd5\010\uffd5\014" +
    "\uffd5\015\uffd5\034\uffd5\035\uffd5\001\002\000\024\007\070" +
    "\022\046\023\036\027\061\036\032\037\057\040\054\041" +
    "\071\042\051\001\002\000\004\007\137\001\002\000\042" +
    "\004\uffc6\005\uffc6\010\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\034\uffc6\035\uffc6\001\002\000\054\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\001\002\000\020\004\uffd7\005\uffd7\010\uffd7\014\131\015" +
    "\130\034\uffd7\035\uffd7\001\002\000\014\004\uffd9\005\uffd9" +
    "\010\uffd9\034\uffd9\035\126\001\002\000\042\004\uffb4\005" +
    "\uffb4\010\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\034" +
    "\uffb4\035\uffb4\001\002\000\026\004\135\007\070\022\046" +
    "\023\036\027\061\036\032\037\057\040\054\041\071\042" +
    "\051\001\002\000\042\004\uffbe\005\uffbe\010\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\034\uffbe\035\uffbe\001\002" +
    "\000\042\004\uffb6\005\uffb6\010\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\034\uffb6\035\uffb6\001\002\000\012\004" +
    "\uffdb\005\uffdb\010\uffdb\034\124\001\002\000\024\007\070" +
    "\022\046\023\036\027\061\036\032\037\057\040\054\041" +
    "\071\042\051\001\002\000\046\004\uffee\007\uffee\011\uffee" +
    "\012\uffee\022\uffee\023\uffee\027\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\053\uffee\001\002\000\046\004\uffef\007\uffef\011" +
    "\uffef\012\uffef\022\uffef\023\uffef\027\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\053\uffef\001\002\000\004\007\117\001\002" +
    "\000\046\004\ufff0\007\ufff0\011\ufff0\012\ufff0\022\ufff0\023" +
    "\ufff0\027\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\053\ufff0\001" +
    "\002\000\054\004\uffc2\005\uffc2\006\101\007\100\010\uffc2" +
    "\013\113\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\032\115" +
    "\033\114\034\uffc2\035\uffc2\001\002\000\004\004\112\001" +
    "\002\000\026\007\070\022\046\023\036\027\061\036\032" +
    "\037\057\040\054\041\071\042\051\053\074\001\002\000" +
    "\042\004\uffb5\005\uffb5\010\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\034\uffb5\035\uffb5\001\002\000\042\004\uffbd" +
    "\005\uffbd\010\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\034\uffbd\035\uffbd\001\002\000\004\010\111\001\002\000" +
    "\004\010\075\001\002\000\016\007\070\036\032\037\057" +
    "\040\054\041\071\042\051\001\002\000\042\004\uffbc\005" +
    "\uffbc\010\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\034" +
    "\uffbc\035\uffbc\001\002\000\046\004\uffc2\005\uffc2\006\101" +
    "\007\100\010\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\034\uffc2\035\uffc2\001\002\000\026\007\070\010\105\022" +
    "\046\023\036\027\061\036\032\037\057\040\054\041\071" +
    "\042\051\001\002\000\004\042\102\001\002\000\054\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\001\002\000\006\005\uffbb\010\uffbb\001\002\000" +
    "\006\005\106\010\107\001\002\000\042\004\uffc0\005\uffc0" +
    "\010\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\034\uffc0" +
    "\035\uffc0\001\002\000\024\007\070\022\046\023\036\027" +
    "\061\036\032\037\057\040\054\041\071\042\051\001\002" +
    "\000\042\004\uffc1\005\uffc1\010\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\034\uffc1\035\uffc1\001\002\000\006\005" +
    "\uffba\010\uffba\001\002\000\042\004\uffbf\005\uffbf\010\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\034\uffbf\035\uffbf" +
    "\001\002\000\046\004\ufff1\007\ufff1\011\ufff1\012\ufff1\022" +
    "\ufff1\023\ufff1\027\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\053" +
    "\ufff1\001\002\000\024\007\070\022\046\023\036\027\061" +
    "\036\032\037\057\040\054\041\071\042\051\001\002\000" +
    "\010\004\uffe9\005\uffe9\010\uffe9\001\002\000\010\004\uffea" +
    "\005\uffea\010\uffea\001\002\000\010\004\uffeb\005\uffeb\010" +
    "\uffeb\001\002\000\024\007\070\022\046\023\036\027\061" +
    "\036\032\037\057\040\054\041\071\042\051\001\002\000" +
    "\004\010\121\001\002\000\042\004\031\007\070\011\026" +
    "\022\046\023\036\027\061\036\032\037\057\040\054\041" +
    "\071\042\051\043\047\045\035\046\064\047\055\053\043" +
    "\001\002\000\046\004\uffe6\007\uffe6\011\uffe6\012\uffe6\022" +
    "\uffe6\023\uffe6\027\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\053" +
    "\uffe6\001\002\000\042\004\uffc5\005\uffc5\010\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\034\uffc5\035\uffc5\001\002" +
    "\000\024\007\070\022\046\023\036\027\061\036\032\037" +
    "\057\040\054\041\071\042\051\001\002\000\014\004\uffd8" +
    "\005\uffd8\010\uffd8\034\uffd8\035\126\001\002\000\024\007" +
    "\070\022\046\023\036\027\061\036\032\037\057\040\054" +
    "\041\071\042\051\001\002\000\020\004\uffd6\005\uffd6\010" +
    "\uffd6\014\131\015\130\034\uffd6\035\uffd6\001\002\000\024" +
    "\007\070\022\046\023\036\027\061\036\032\037\057\040" +
    "\054\041\071\042\051\001\002\000\024\007\070\022\046" +
    "\023\036\027\061\036\032\037\057\040\054\041\071\042" +
    "\051\001\002\000\020\004\uffd4\005\uffd4\010\uffd4\014\uffd4" +
    "\015\uffd4\034\uffd4\035\uffd4\001\002\000\020\004\uffd3\005" +
    "\uffd3\010\uffd3\014\uffd3\015\uffd3\034\uffd3\035\uffd3\001\002" +
    "\000\004\004\136\001\002\000\046\004\uffe3\007\uffe3\011" +
    "\uffe3\012\uffe3\022\uffe3\023\uffe3\027\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\053\uffe3\001\002\000\046\004\uffe2\007\uffe2" +
    "\011\uffe2\012\uffe2\022\uffe2\023\uffe2\027\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\053\uffe2\001\002\000\024\007\070\022" +
    "\046\023\036\027\061\036\032\037\057\040\054\041\071" +
    "\042\051\001\002\000\004\010\141\001\002\000\042\004" +
    "\031\007\070\011\026\022\046\023\036\027\061\036\032" +
    "\037\057\040\054\041\071\042\051\043\047\045\035\046" +
    "\064\047\055\053\043\001\002\000\046\004\uffe8\007\uffe8" +
    "\011\uffe8\012\uffe8\022\uffe8\023\uffe8\027\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\143\045\uffe8" +
    "\046\uffe8\047\uffe8\053\uffe8\001\002\000\042\004\031\007" +
    "\070\011\026\022\046\023\036\027\061\036\032\037\057" +
    "\040\054\041\071\042\051\043\047\045\035\046\064\047" +
    "\055\053\043\001\002\000\046\004\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\022\uffe7\023\uffe7\027\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\053\uffe7\001\002\000\042\004\uffc4\005\uffc4\010" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\034\uffc4\035" +
    "\uffc4\001\002\000\024\007\070\022\046\023\036\027\061" +
    "\036\032\037\057\040\054\041\071\042\051\001\002\000" +
    "\024\007\070\022\046\023\036\027\061\036\032\037\057" +
    "\040\054\041\071\042\051\001\002\000\024\007\070\022" +
    "\046\023\036\027\061\036\032\037\057\040\054\041\071" +
    "\042\051\001\002\000\024\007\070\022\046\023\036\027" +
    "\061\036\032\037\057\040\054\041\071\042\051\001\002" +
    "\000\024\007\070\022\046\023\036\027\061\036\032\037" +
    "\057\040\054\041\071\042\051\001\002\000\024\007\070" +
    "\022\046\023\036\027\061\036\032\037\057\040\054\041" +
    "\071\042\051\001\002\000\024\004\uffcf\005\uffcf\010\uffcf" +
    "\014\uffcf\015\uffcf\022\151\023\152\034\uffcf\035\uffcf\001" +
    "\002\000\042\004\uffcb\005\uffcb\010\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\160\025\157\026\156\034\uffcb\035\uffcb\001\002\000\024" +
    "\007\070\022\046\023\036\027\061\036\032\037\057\040" +
    "\054\041\071\042\051\001\002\000\024\007\070\022\046" +
    "\023\036\027\061\036\032\037\057\040\054\041\071\042" +
    "\051\001\002\000\024\007\070\022\046\023\036\027\061" +
    "\036\032\037\057\040\054\041\071\042\051\001\002\000" +
    "\042\004\uffc9\005\uffc9\010\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\034\uffc9\035\uffc9\001\002\000\042\004\uffc8" +
    "\005\uffc8\010\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\034\uffc8\035\uffc8\001\002\000\042\004\uffc7\005\uffc7\010" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\034\uffc7\035" +
    "\uffc7\001\002\000\042\004\uffcc\005\uffcc\010\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\160\025\157\026\156\034\uffcc\035\uffcc\001\002" +
    "\000\024\004\uffd0\005\uffd0\010\uffd0\014\uffd0\015\uffd0\022" +
    "\151\023\152\034\uffd0\035\uffd0\001\002\000\024\004\uffce" +
    "\005\uffce\010\uffce\014\uffce\015\uffce\022\151\023\152\034" +
    "\uffce\035\uffce\001\002\000\024\004\uffd1\005\uffd1\010\uffd1" +
    "\014\uffd1\015\uffd1\022\151\023\152\034\uffd1\035\uffd1\001" +
    "\002\000\010\004\uffdd\005\uffdd\013\175\001\002\000\006" +
    "\004\uffdf\005\uffdf\001\002\000\006\004\uffe0\005\173\001" +
    "\002\000\004\042\170\001\002\000\006\004\uffde\005\uffde" +
    "\001\002\000\024\007\070\022\046\023\036\027\061\036" +
    "\032\037\057\040\054\041\071\042\051\001\002\000\006" +
    "\004\uffdc\005\uffdc\001\002\000\042\004\uffc3\005\uffc3\010" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\034\uffc3\035" +
    "\uffc3\001\002\000\006\042\051\053\043\001\002\000\004" +
    "\004\212\001\002\000\004\004\204\001\002\000\012\006" +
    "\101\013\113\032\115\033\114\001\002\000\024\007\070" +
    "\022\046\023\036\027\061\036\032\037\057\040\054\041" +
    "\071\042\051\001\002\000\004\004\206\001\002\000\024" +
    "\007\070\022\046\023\036\027\061\036\032\037\057\040" +
    "\054\041\071\042\051\001\002\000\004\010\210\001\002" +
    "\000\042\004\031\007\070\011\026\022\046\023\036\027" +
    "\061\036\032\037\057\040\054\041\071\042\051\043\047" +
    "\045\035\046\064\047\055\053\043\001\002\000\046\004" +
    "\uffe5\007\uffe5\011\uffe5\012\uffe5\022\uffe5\023\uffe5\027\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\053\uffe5\001\002\000\024" +
    "\007\070\022\046\023\036\027\061\036\032\037\057\040" +
    "\054\041\071\042\051\001\002\000\004\004\214\001\002" +
    "\000\024\007\070\022\046\023\036\027\061\036\032\037" +
    "\057\040\054\041\071\042\051\001\002\000\004\010\216" +
    "\001\002\000\042\004\031\007\070\011\026\022\046\023" +
    "\036\027\061\036\032\037\057\040\054\041\071\042\051" +
    "\043\047\045\035\046\064\047\055\053\043\001\002\000" +
    "\046\004\uffe4\007\uffe4\011\uffe4\012\uffe4\022\uffe4\023\uffe4" +
    "\027\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\053\uffe4\001\002" +
    "\000\046\004\uffed\007\uffed\011\uffed\012\uffed\022\uffed\023" +
    "\uffed\027\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\053\uffed\001" +
    "\002\000\044\004\ufff3\007\ufff3\011\ufff3\012\ufff3\022\ufff3" +
    "\023\ufff3\027\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\053\ufff3\001\002" +
    "\000\050\002\uffe1\004\uffe1\007\uffe1\011\uffe1\012\uffe1\022" +
    "\uffe1\023\uffe1\027\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\053" +
    "\uffe1\001\002\000\006\002\ufffc\053\ufffc\001\002\000\006" +
    "\004\225\006\101\001\002\000\006\052\ufffd\053\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\005\003\006\004\001\001\000\010\004" +
    "\007\007\010\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\223\001\001\000\002\001\001\000" +
    "\004\010\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\015\012\017\013\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\023\001" +
    "\001\000\002\001\001\000\004\016\026\001\001\000\052" +
    "\002\055\003\065\014\032\015\027\016\041\017\033\022" +
    "\066\023\057\024\052\025\051\026\044\027\043\030\040" +
    "\031\037\032\047\033\036\034\071\036\064\037\062\040" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\002\055\003\065\015" +
    "\220\016\041\017\033\022\066\023\057\024\052\025\051" +
    "\026\044\027\043\030\040\031\037\032\047\033\036\034" +
    "\071\036\064\037\062\040\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\055\003\076\031\176\032" +
    "\047\034\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\171\021" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\055\003\076\031\144\032\047\034\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\055\003\065\022\133\023\057\024\052\025\051\026\044" +
    "\027\043\030\040\031\037\032\047\033\036\034\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\055\003\076\031\122\032\047\034\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\055\003\065\022\072\023\057\024\052\025\051" +
    "\026\044\027\043\030\040\031\037\032\047\033\036\034" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\055\003\076\032" +
    "\075\034\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\055\003\065\022\102\023\057\024\052\025" +
    "\051\026\044\027\043\030\040\031\037\032\047\033\036" +
    "\034\071\035\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\055\003\065\022\107\023\057\024\052\025" +
    "\051\026\044\027\043\030\040\031\037\032\047\033\036" +
    "\034\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\055\003\065" +
    "\022\115\023\057\024\052\025\051\026\044\027\043\030" +
    "\040\031\037\032\047\033\036\034\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\055\003\065\022\117\023\057\024\052\025\051\026\044" +
    "\027\043\030\040\031\037\032\047\033\036\034\071\001" +
    "\001\000\002\001\001\000\050\002\055\003\065\015\121" +
    "\016\041\017\033\022\066\023\057\024\052\025\051\026" +
    "\044\027\043\030\040\031\037\032\047\033\036\034\071" +
    "\036\064\037\062\040\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\055\003\076\024\124\025\051" +
    "\026\044\027\043\030\040\031\037\032\047\034\071\001" +
    "\001\000\002\001\001\000\024\002\055\003\076\025\126" +
    "\026\044\027\043\030\040\031\037\032\047\034\071\001" +
    "\001\000\002\001\001\000\022\002\055\003\076\026\132" +
    "\027\043\030\040\031\037\032\047\034\071\001\001\000" +
    "\022\002\055\003\076\026\131\027\043\030\040\031\037" +
    "\032\047\034\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\055\003\065\022\137\023\057\024\052\025" +
    "\051\026\044\027\043\030\040\031\037\032\047\033\036" +
    "\034\071\001\001\000\002\001\001\000\050\002\055\003" +
    "\065\015\141\016\041\017\033\022\066\023\057\024\052" +
    "\025\051\026\044\027\043\030\040\031\037\032\047\033" +
    "\036\034\071\036\064\037\062\040\061\001\001\000\002" +
    "\001\001\000\050\002\055\003\065\015\143\016\041\017" +
    "\033\022\066\023\057\024\052\025\051\026\044\027\043" +
    "\030\040\031\037\032\047\033\036\034\071\036\064\037" +
    "\062\040\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\055\003\076\027\166\030\040\031\037\032" +
    "\047\034\071\001\001\000\020\002\055\003\076\027\165" +
    "\030\040\031\037\032\047\034\071\001\001\000\020\002" +
    "\055\003\076\027\164\030\040\031\037\032\047\034\071" +
    "\001\001\000\016\002\055\003\076\030\163\031\037\032" +
    "\047\034\071\001\001\000\016\002\055\003\076\030\154" +
    "\031\037\032\047\034\071\001\001\000\020\002\055\003" +
    "\076\027\153\030\040\031\037\032\047\034\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\055\003" +
    "\076\031\162\032\047\034\071\001\001\000\014\002\055" +
    "\003\076\031\161\032\047\034\071\001\001\000\014\002" +
    "\055\003\076\031\160\032\047\034\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\173\001\001\000\002\001\001\000\034\002\055" +
    "\003\065\022\175\023\057\024\052\025\051\026\044\027" +
    "\043\030\040\031\037\032\047\033\036\034\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\202\017" +
    "\201\033\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\055\003\065\022\204\023" +
    "\057\024\052\025\051\026\044\027\043\030\040\031\037" +
    "\032\047\033\036\034\071\001\001\000\002\001\001\000" +
    "\034\002\055\003\065\022\206\023\057\024\052\025\051" +
    "\026\044\027\043\030\040\031\037\032\047\033\036\034" +
    "\071\001\001\000\002\001\001\000\050\002\055\003\065" +
    "\015\210\016\041\017\033\022\066\023\057\024\052\025" +
    "\051\026\044\027\043\030\040\031\037\032\047\033\036" +
    "\034\071\036\064\037\062\040\061\001\001\000\002\001" +
    "\001\000\034\002\055\003\065\022\212\023\057\024\052" +
    "\025\051\026\044\027\043\030\040\031\037\032\047\033" +
    "\036\034\071\001\001\000\002\001\001\000\034\002\055" +
    "\003\065\022\214\023\057\024\052\025\051\026\044\027" +
    "\043\030\040\031\037\032\047\033\036\034\071\001\001" +
    "\000\002\001\001\000\050\002\055\003\065\015\216\016" +
    "\041\017\033\022\066\023\057\024\052\025\051\026\044" +
    "\027\043\030\040\031\037\032\047\033\036\034\071\036" +
    "\064\037\062\040\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public void syntax_error(Symbol token)
	{
		StringBuffer bf = new StringBuffer("[ERROR]");
			
		bf.append(" Line ");
		bf.append(token.left+1);
		bf.append(", column ");
		bf.append(token.right+1);
		bf.append(": " + token.toString());
					
		System.out.println(bf);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // constant ::= BOOLEAN 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(eleft, eright, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // constant ::= STRING 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(eleft, eright, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // constant ::= REAL 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(eleft, eright, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // constant ::= INT 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(eleft, eright, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // path ::= path DOT ID 
            {
              PathID RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PathID p = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; p.append(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // path ::= ID 
            {
              PathID RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PathID(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_list ::= expr_list COLON expr 
            {
              List<Expression> RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> elist = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			    elist.add(e);
			    RESULT = elist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				RESULT = new Vector<Expression>(); 
				RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type_cast ::= LPAR TYPE RPAR simple_expr 
            {
              TypeCast RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new TypeCast(tleft, tright, e, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_cast",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_expr ::= type_cast 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeCast e = (TypeCast)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_expr ::= constant 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstantExpr c = (ConstantExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_expr ::= LPAR expr RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simple_expr ::= path LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PathID id = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                     RESULT = new FunctionCall(idleft, idright, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_expr ::= path LPAR expr_list RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PathID id = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> elist = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                	RESULT = new FunctionCall(idleft, idright, id, elist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_expr ::= path 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PathID id = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExpr(idleft, idright, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary_expr ::= MINUS unary_expr 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = new FunctionCall(opleft, opright, "_NNEG", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unary_expr ::= PLUS unary_expr 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unary_expr ::= NEG unary_expr 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = new FunctionCall(opleft, opright, "_LNEG", e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unary_expr ::= simple_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // num_expr_mul ::= num_expr_mul MODULO unary_expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright,"_REM", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // num_expr_mul ::= num_expr_mul DIVIDE unary_expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright,"_DIV", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // num_expr_mul ::= num_expr_mul TIMES unary_expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright,"_MUL", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // num_expr_mul ::= unary_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // num_expr_add ::= num_expr_add MINUS num_expr_mul 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright,"_SUB", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_add",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // num_expr_add ::= num_expr_add PLUS num_expr_mul 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright,"_ADD", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_add",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // num_expr_add ::= num_expr_mul 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_add",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_expr_rel ::= num_expr_add GTEQ num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_GE", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_expr_rel ::= num_expr_add LTEQ num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_LE", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_expr_rel ::= num_expr_add GT num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_GT", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_expr_rel ::= num_expr_add LT num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_LT", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_expr_rel ::= num_expr_add 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_expr_cmp ::= bool_expr_cmp NEQEQ bool_expr_rel 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_NEQEQ", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_cmp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_expr_cmp ::= bool_expr_cmp EQEQ bool_expr_rel 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_EQEQ", e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_cmp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_expr_cmp ::= bool_expr_rel 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_cmp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_expr_and ::= bool_expr_and LOGAND bool_expr_cmp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_LAND",  e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_and",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bool_expr_and ::= bool_expr_cmp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_and",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_expr_or ::= bool_expr_or LOGOR bool_expr_and 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall(opleft, opright, "_LOR",  e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_or",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_expr_or ::= bool_expr_and 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_or",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= assign_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= bool_expr_or 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declarator ::= ID EQUAL expr 
            {
              Pair<String,Expression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			        RESULT = new Pair<String,Expression>(id, e);
			        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declarator ::= ID 
            {
              Pair<String,Expression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Pair<String,Expression>(id, Expression.NULL); 
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarator_list ::= declarator_list COLON declarator 
            {
              List<Pair<String,Expression>> RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Pair<String,Expression>> dlist = (List<Pair<String,Expression>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pair<String,Expression> d = (Pair<String,Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					    dlist.add(d);
					    RESULT = dlist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declarator_list ::= declarator 
            {
              List<Pair<String,Expression>> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pair<String,Expression> d = (Pair<String,Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					    RESULT = new Vector<Pair<String,Expression>>();
					    RESULT.add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_decl ::= TYPE declarator_list 
            {
              InstrList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Pair<String,Expression>> dlist = (List<Pair<String,Expression>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			InstrList il = new InstrList(tleft, tright); 					
			for(Pair<String, Expression> decl : dlist) {
				il.add( new VarDecl(tleft, tright, t, decl.first(), decl.second()));
			};
			RESULT = il; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // complex_instr ::= LCURLY instr_list RCURLY 
            {
              InstrBlock RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> ilist = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new InstrBlock(sleft, sright, ilist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_instr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_instr ::= RETURN expr SEMI 
            {
              ReturnInstr RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnInstr(retleft, retright,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_instr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // return_instr ::= RETURN SEMI 
            {
              ReturnInstr RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnInstr(retleft, retright, Expression.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_instr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // loop_instr ::= FOR LPAR assign_expr SEMI expr SEMI expr RPAR instr 
            {
              LoopInstr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression post = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction body = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			  	RESULT = new LoopInstr(opleft, opright, e, body, init, post); 
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // loop_instr ::= FOR LPAR var_decl SEMI expr SEMI expr RPAR instr 
            {
              LoopInstr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		InstrList init = (InstrList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression post = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction body = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			  	RESULT = new LoopInstr(opleft, opright, e, body, init, post); 
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // loop_instr ::= WHILE LPAR expr RPAR instr 
            {
              LoopInstr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				  RESULT = new LoopInstr(opleft, opright, e, i, Instruction.EMPTY, Instruction.EMPTY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cond_instr ::= IF LPAR expr RPAR instr ELSE instr 
            {
              CondInstr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction i1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			      RESULT = new CondInstr(opleft, opright, e, i1, i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_instr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cond_instr ::= IF LPAR expr RPAR instr 
            {
              CondInstr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				  RESULT = new CondInstr(opleft, opright, e, i, Instruction.EMPTY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_instr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign_expr ::= path MINUSMINUS 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathID id = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				 	RESULT = new IncrementInstr(opleft, opright, id, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign_expr ::= path PLUSPLUS 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathID id = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				 	RESULT = new IncrementInstr(opleft, opright, id, 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assign_expr ::= path EQUAL expr 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PathID id = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new AssignmentInstr(opleft, opright, id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instr ::= SEMI 
            {
              Instruction RESULT =null;
		 RESULT =  new EmptyInstruction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= var_decl SEMI 
            {
              Instruction RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstrList vd = (InstrList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= return_instr 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ReturnInstr i = (ReturnInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= loop_instr 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LoopInstr i = (LoopInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= cond_instr 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CondInstr i = (CondInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= expr SEMI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= complex_instr 
            {
              Instruction RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrBlock ci = (InstrBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ci; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr_list ::= instr_list instr 
            {
              List<Instruction> RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> ilist = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   		if(i instanceof InstrBlock) {
						ilist.add(i);					
					}
					else {
						for(Instruction x : i) 
			   				ilist.add(x);
			   		}
			   		RESULT = ilist; 
			   		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr_list ::= instr 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Vector<Instruction>();
					if(i instanceof InstrBlock) {
						RESULT.add(i);					
					}
					else {
						for(Instruction x : i) 
			   				RESULT.add(x);
			   		}
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_decl ::= TYPE ID LPAR arg_dlist RPAR complex_instr 
            {
              FunctionDecl RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type rt = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ArgumentDecl> args = (List<ArgumentDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstrBlock ci = (InstrBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
									
				RESULT = new FunctionDecl(rtleft, rtright, fid, rt, args, ci);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arg_decl ::= TYPE ID 
            {
              ArgumentDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentDecl(typeleft, typeright, type, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_decl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arg_dlist_ne ::= arg_decl 
            {
              List<ArgumentDecl> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentDecl arg = (ArgumentDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Vector<ArgumentDecl>(); 
				                 RESULT.add(arg); 
				              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist_ne",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arg_dlist_ne ::= arg_dlist_ne COLON arg_decl 
            {
              List<ArgumentDecl> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ArgumentDecl> al = (List<ArgumentDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentDecl arg = (ArgumentDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 al.add(arg); RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist_ne",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arg_dlist ::= 
            {
              List<ArgumentDecl> RESULT =null;
		 RESULT = new Vector<ArgumentDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arg_dlist ::= arg_dlist_ne 
            {
              List<ArgumentDecl> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ArgumentDecl> al = (List<ArgumentDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_list ::= func_decl 
            {
              List<FunctionDecl> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDecl fd = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			    RESULT = new Vector<FunctionDecl>();
			    RESULT.add(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_list ::= func_list func_decl 
            {
              List<FunctionDecl> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionDecl> fl = (List<FunctionDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDecl fd = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				RESULT = fl;
				RESULT.add(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // import_stmt ::= IMPORT path SEMI 
            {
              ImportStmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PathID p = (PathID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = new ImportStmt(pleft, pright, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // import_list ::= 
            {
              List<ImportStmt> RESULT =null;
		 RESULT = new Vector<ImportStmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // import_list ::= import_list import_stmt 
            {
              List<ImportStmt> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ImportStmt> lst = (List<ImportStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ImportStmt tok = (ImportStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(tok); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CompileUnit start_val = (CompileUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= import_list func_list 
            {
              CompileUnit RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ImportStmt> el = (List<ImportStmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDecl> fl = (List<FunctionDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompileUnit(flleft, flright, "Unit", el, fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

