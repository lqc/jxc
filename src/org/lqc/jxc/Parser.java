
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 26 19:05:41 CEST 2008
//----------------------------------------------------

package org.lqc.jxc;

import java_cup.runtime.*;
import org.lqc.jxc.types.*;
import org.lqc.jxc.tokens.*;
import java.util.List;
import java.util.Vector;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 26 19:05:41 CEST 2008
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\006\003\000\002\006\002" +
    "\000\002\007\005\000\002\007\003\000\002\010\004\000" +
    "\002\005\010\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\012\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\014\005\000\002\014\004\000" +
    "\002\014\004\000\002\032\007\000\002\032\011\000\002" +
    "\033\007\000\002\033\013\000\002\034\004\000\002\034" +
    "\005\000\002\013\005\000\002\015\005\000\002\016\003" +
    "\000\002\016\005\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\021\003\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\024\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\025\003\000\002\025\005\000\002\025\005\000\002" +
    "\026\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\027\003\000\002\027\004\000\002\027\004" +
    "\000\002\027\004\000\002\030\003\000\002\030\006\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\005\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\047\007\001\002\000\006\002\001\047" +
    "\007\001\002\000\004\002\202\001\002\000\006\002\ufffe" +
    "\047\ufffe\001\002\000\004\041\010\001\002\000\004\006" +
    "\011\001\002\000\006\007\ufffc\047\015\001\002\000\004" +
    "\007\021\001\002\000\006\005\ufffa\007\ufffa\001\002\000" +
    "\006\005\017\007\ufffd\001\002\000\004\041\016\001\002" +
    "\000\006\005\ufff9\007\ufff9\001\002\000\004\047\015\001" +
    "\002\000\006\005\ufffb\007\ufffb\001\002\000\004\010\022" +
    "\001\002\000\040\006\062\010\022\021\027\022\055\026" +
    "\030\035\033\036\060\037\047\040\052\041\043\042\042" +
    "\044\057\045\034\046\036\047\050\001\002\000\006\002" +
    "\ufff8\047\ufff8\001\002\000\004\004\201\001\002\000\020" +
    "\004\uffdb\005\uffdb\007\uffdb\013\117\014\116\033\uffdb\034" +
    "\uffdb\001\002\000\034\004\uffd6\005\uffd6\007\uffd6\013\uffd6" +
    "\014\uffd6\015\165\016\172\017\167\020\166\021\170\022" +
    "\171\033\uffd6\034\uffd6\001\002\000\024\006\062\021\027" +
    "\022\055\026\030\035\033\036\060\037\047\040\052\041" +
    "\065\001\002\000\024\006\062\021\027\022\055\026\030" +
    "\035\033\036\060\037\047\040\052\041\065\001\002\000" +
    "\004\004\162\001\002\000\042\004\uffc2\005\uffc2\007\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\033\uffc2\034\uffc2" +
    "\001\002\000\042\004\uffbf\005\uffbf\007\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\033\uffbf\034\uffbf\001\002\000" +
    "\004\006\156\001\002\000\012\004\uffde\005\uffde\007\uffde" +
    "\033\154\001\002\000\026\004\152\006\062\021\027\022" +
    "\055\026\030\035\033\036\060\037\047\040\052\041\065" +
    "\001\002\000\042\006\062\010\022\011\146\021\027\022" +
    "\055\026\030\035\033\036\060\037\047\040\052\041\043" +
    "\042\042\044\057\045\034\046\036\047\050\001\002\000" +
    "\044\006\ufff0\010\ufff0\011\ufff0\021\ufff0\022\ufff0\026\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000\042" +
    "\004\uffd1\005\uffd1\007\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\142\024\141" +
    "\025\140\033\uffd1\034\uffd1\001\002\000\004\006\132\001" +
    "\002\000\046\004\uffc6\006\066\012\107\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\031\111\032\110\033\uffc6\034\uffc6" +
    "\001\002\000\042\006\ufff6\010\ufff6\011\ufff6\021\ufff6\022" +
    "\ufff6\026\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002\000" +
    "\042\004\uffca\005\uffca\007\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\033\uffca\034\uffca\001\002\000\042\004\uffce" +
    "\005\uffce\007\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\033\uffce\034\uffce\001\002\000\042\004\uffbc\005\uffbc\007" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\033\uffbc\034" +
    "\uffbc\001\002\000\004\041\122\001\002\000\014\004\uffdd" +
    "\005\uffdd\007\uffdd\033\uffdd\034\114\001\002\000\042\004" +
    "\uffbd\005\uffbd\007\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\033\uffbd\034\uffbd\001\002\000\020\004\uffd9\005\uffd9" +
    "\007\uffd9\013\uffd9\014\uffd9\033\uffd9\034\uffd9\001\002\000" +
    "\044\006\uffef\010\uffef\011\uffef\021\uffef\022\uffef\026\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\001\002\000\024" +
    "\006\062\021\027\022\055\026\030\035\033\036\060\037" +
    "\047\040\052\041\065\001\002\000\042\006\ufff7\010\ufff7" +
    "\011\ufff7\021\ufff7\022\ufff7\026\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\001\002\000\004\006\076\001\002\000\042\004" +
    "\uffbe\005\uffbe\007\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\033\uffbe\034\uffbe\001\002\000\044\006\ufff3\010\ufff3" +
    "\011\ufff3\021\ufff3\022\ufff3\026\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\001\002\000\024\006\062\021\027\022" +
    "\055\026\030\035\033\036\060\037\047\040\052\041\065" +
    "\001\002\000\044\006\uffee\010\uffee\011\uffee\021\uffee\022" +
    "\uffee\026\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001" +
    "\002\000\004\007\075\001\002\000\044\004\uffc6\005\uffc6" +
    "\006\066\007\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\033\uffc6\034\uffc6\001\002\000\026\006\062\007\071\021" +
    "\027\022\055\026\030\035\033\036\060\037\047\040\052" +
    "\041\065\001\002\000\006\005\uffc1\007\uffc1\001\002\000" +
    "\006\005\072\007\073\001\002\000\042\004\uffc4\005\uffc4" +
    "\007\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\033\uffc4" +
    "\034\uffc4\001\002\000\024\006\062\021\027\022\055\026" +
    "\030\035\033\036\060\037\047\040\052\041\065\001\002" +
    "\000\042\004\uffc5\005\uffc5\007\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\033\uffc5\034\uffc5\001\002\000\006\005" +
    "\uffc0\007\uffc0\001\002\000\042\004\uffc3\005\uffc3\007\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\033\uffc3\034\uffc3" +
    "\001\002\000\004\041\077\001\002\000\010\012\107\031" +
    "\111\032\110\001\002\000\004\004\101\001\002\000\024" +
    "\006\062\021\027\022\055\026\030\035\033\036\060\037" +
    "\047\040\052\041\065\001\002\000\004\004\103\001\002" +
    "\000\004\041\077\001\002\000\004\007\105\001\002\000" +
    "\036\006\062\010\022\021\027\022\055\026\030\035\033" +
    "\036\060\037\047\040\052\041\043\042\042\044\057\045" +
    "\034\046\036\001\002\000\044\006\uffe7\010\uffe7\011\uffe7" +
    "\021\uffe7\022\uffe7\026\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\001\002\000\024\006\062\021\027\022\055\026" +
    "\030\035\033\036\060\037\047\040\052\041\065\001\002" +
    "\000\006\004\uffeb\007\uffeb\001\002\000\006\004\uffec\007" +
    "\uffec\001\002\000\006\004\uffed\007\uffed\001\002\000\042" +
    "\004\uffc7\005\uffc7\007\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\033\uffc7\034\uffc7\001\002\000\024\006\062\021" +
    "\027\022\055\026\030\035\033\036\060\037\047\040\052" +
    "\041\065\001\002\000\020\004\uffda\005\uffda\007\uffda\013" +
    "\117\014\116\033\uffda\034\uffda\001\002\000\024\006\062" +
    "\021\027\022\055\026\030\035\033\036\060\037\047\040" +
    "\052\041\065\001\002\000\024\006\062\021\027\022\055" +
    "\026\030\035\033\036\060\037\047\040\052\041\065\001" +
    "\002\000\020\004\uffd8\005\uffd8\007\uffd8\013\uffd8\014\uffd8" +
    "\033\uffd8\034\uffd8\001\002\000\020\004\uffd7\005\uffd7\007" +
    "\uffd7\013\uffd7\014\uffd7\033\uffd7\034\uffd7\001\002\000\010" +
    "\004\uffe0\005\uffe0\012\130\001\002\000\006\004\uffe2\005" +
    "\uffe2\001\002\000\006\004\125\005\126\001\002\000\042" +
    "\006\uffe3\010\uffe3\011\uffe3\021\uffe3\022\uffe3\026\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\001\002\000\004\041\122\001" +
    "\002\000\006\004\uffe1\005\uffe1\001\002\000\024\006\062" +
    "\021\027\022\055\026\030\035\033\036\060\037\047\040" +
    "\052\041\065\001\002\000\006\004\uffdf\005\uffdf\001\002" +
    "\000\024\006\062\021\027\022\055\026\030\035\033\036" +
    "\060\037\047\040\052\041\065\001\002\000\004\007\134" +
    "\001\002\000\036\006\062\010\022\021\027\022\055\026" +
    "\030\035\033\036\060\037\047\040\052\041\043\042\042" +
    "\044\057\045\034\046\036\001\002\000\044\006\uffea\010" +
    "\uffea\011\uffea\021\uffea\022\uffea\026\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\136\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\001\002\000\036\006\062\010\022" +
    "\021\027\022\055\026\030\035\033\036\060\037\047\040" +
    "\052\041\043\042\042\044\057\045\034\046\036\001\002" +
    "\000\044\006\uffe9\010\uffe9\011\uffe9\021\uffe9\022\uffe9\026" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\001\002\000" +
    "\024\006\062\021\027\022\055\026\030\035\033\036\060" +
    "\037\047\040\052\041\065\001\002\000\024\006\062\021" +
    "\027\022\055\026\030\035\033\036\060\037\047\040\052" +
    "\041\065\001\002\000\024\006\062\021\027\022\055\026" +
    "\030\035\033\036\060\037\047\040\052\041\065\001\002" +
    "\000\042\004\uffcd\005\uffcd\007\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\033\uffcd\034\uffcd\001\002\000\042\004" +
    "\uffcc\005\uffcc\007\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\033\uffcc\034\uffcc\001\002\000\042\004\uffcb\005\uffcb" +
    "\007\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\033\uffcb" +
    "\034\uffcb\001\002\000\046\002\uffe4\006\uffe4\010\uffe4\011" +
    "\uffe4\021\uffe4\022\uffe4\026\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\001\002\000\042\006\ufff4\010\ufff4\011\ufff4" +
    "\021\ufff4\022\ufff4\026\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\001\002\000\042\006\ufff5\010\ufff5\011\ufff5\021\ufff5\022" +
    "\ufff5\026\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\001\002\000" +
    "\004\004\153\001\002\000\044\006\uffe6\010\uffe6\011\uffe6" +
    "\021\uffe6\022\uffe6\026\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\001\002\000\044\006\uffe5\010\uffe5\011\uffe5\021" +
    "\uffe5\022\uffe5\026\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\001\002\000\024\006\062\021\027\022\055\026\030" +
    "\035\033\036\060\037\047\040\052\041\065\001\002\000" +
    "\014\004\uffdc\005\uffdc\007\uffdc\033\uffdc\034\114\001\002" +
    "\000\024\006\062\021\027\022\055\026\030\035\033\036" +
    "\060\037\047\040\052\041\065\001\002\000\004\007\160" +
    "\001\002\000\036\006\062\010\022\021\027\022\055\026" +
    "\030\035\033\036\060\037\047\040\052\041\043\042\042" +
    "\044\057\045\034\046\036\001\002\000\044\006\uffe8\010" +
    "\uffe8\011\uffe8\021\uffe8\022\uffe8\026\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\001\002\000\044\006\ufff2\010\ufff2" +
    "\011\ufff2\021\ufff2\022\ufff2\026\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\001\002\000\042\004\uffc9\005\uffc9\007" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\033\uffc9\034" +
    "\uffc9\001\002\000\042\004\uffc8\005\uffc8\007\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\033\uffc8\034\uffc8\001\002" +
    "\000\024\006\062\021\027\022\055\026\030\035\033\036" +
    "\060\037\047\040\052\041\065\001\002\000\024\006\062" +
    "\021\027\022\055\026\030\035\033\036\060\037\047\040" +
    "\052\041\065\001\002\000\024\006\062\021\027\022\055" +
    "\026\030\035\033\036\060\037\047\040\052\041\065\001" +
    "\002\000\024\006\062\021\027\022\055\026\030\035\033" +
    "\036\060\037\047\040\052\041\065\001\002\000\024\006" +
    "\062\021\027\022\055\026\030\035\033\036\060\037\047" +
    "\040\052\041\065\001\002\000\024\006\062\021\027\022" +
    "\055\026\030\035\033\036\060\037\047\040\052\041\065" +
    "\001\002\000\024\004\uffd3\005\uffd3\007\uffd3\013\uffd3\014" +
    "\uffd3\021\170\022\171\033\uffd3\034\uffd3\001\002\000\042" +
    "\004\uffcf\005\uffcf\007\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\142\024\141" +
    "\025\140\033\uffcf\034\uffcf\001\002\000\042\004\uffd0\005" +
    "\uffd0\007\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\142\024\141\025\140\033" +
    "\uffd0\034\uffd0\001\002\000\024\004\uffd4\005\uffd4\007\uffd4" +
    "\013\uffd4\014\uffd4\021\170\022\171\033\uffd4\034\uffd4\001" +
    "\002\000\024\004\uffd2\005\uffd2\007\uffd2\013\uffd2\014\uffd2" +
    "\021\170\022\171\033\uffd2\034\uffd2\001\002\000\024\004" +
    "\uffd5\005\uffd5\007\uffd5\013\uffd5\014\uffd5\021\170\022\171" +
    "\033\uffd5\034\uffd5\001\002\000\044\006\ufff1\010\ufff1\011" +
    "\ufff1\021\ufff1\022\ufff1\026\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\001\002\000\004\002\000\001\002\000\006" +
    "\002\uffff\047\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\003\004\004\003\005\005\001\001\000" +
    "\004\005\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\011\007" +
    "\013\010\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\017\001\001\000\002\001\001\000\004\013\022" +
    "\001\001\000\046\002\031\011\036\012\055\013\060\014" +
    "\023\015\043\020\030\021\034\022\050\023\024\024\052" +
    "\025\025\026\040\027\045\030\044\032\037\033\053\034" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\031\027\163\030" +
    "\044\001\001\000\010\002\031\027\162\030\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\031\020\150" +
    "\021\034\022\050\023\024\024\052\025\025\026\040\027" +
    "\045\030\044\001\001\000\044\002\031\012\147\013\060" +
    "\014\023\015\146\020\030\021\034\022\050\023\024\024" +
    "\052\025\025\026\040\027\045\030\044\032\037\033\053" +
    "\034\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\123\017\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\031\027" +
    "\112\030\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\031\020" +
    "\063\021\034\022\050\023\024\024\052\025\025\026\040" +
    "\027\045\030\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\031\020\066\021\034" +
    "\022\050\023\024\024\052\025\025\026\040\027\045\030" +
    "\044\031\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\031\020\073\021\034\022" +
    "\050\023\024\024\052\025\025\026\040\027\045\030\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\031\020\101\021\034\022\050\023" +
    "\024\024\052\025\025\026\040\027\045\030\044\001\001" +
    "\000\002\001\001\000\004\014\103\001\001\000\002\001" +
    "\001\000\042\002\031\012\105\013\060\014\023\020\030" +
    "\021\034\022\050\023\024\024\052\025\025\026\040\027" +
    "\045\030\044\032\037\033\053\034\062\001\001\000\002" +
    "\001\001\000\026\002\031\020\111\021\034\022\050\023" +
    "\024\024\052\025\025\026\040\027\045\030\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\031\023\114\024\052\025\025" +
    "\026\040\027\045\030\044\001\001\000\002\001\001\000" +
    "\016\002\031\024\120\025\025\026\040\027\045\030\044" +
    "\001\001\000\016\002\031\024\117\025\025\026\040\027" +
    "\045\030\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\126\001\001\000\002\001\001" +
    "\000\026\002\031\020\130\021\034\022\050\023\024\024" +
    "\052\025\025\026\040\027\045\030\044\001\001\000\002" +
    "\001\001\000\026\002\031\020\132\021\034\022\050\023" +
    "\024\024\052\025\025\026\040\027\045\030\044\001\001" +
    "\000\002\001\001\000\042\002\031\012\134\013\060\014" +
    "\023\020\030\021\034\022\050\023\024\024\052\025\025" +
    "\026\040\027\045\030\044\032\037\033\053\034\062\001" +
    "\001\000\002\001\001\000\042\002\031\012\136\013\060" +
    "\014\023\020\030\021\034\022\050\023\024\024\052\025" +
    "\025\026\040\027\045\030\044\032\037\033\053\034\062" +
    "\001\001\000\002\001\001\000\010\002\031\027\144\030" +
    "\044\001\001\000\010\002\031\027\143\030\044\001\001" +
    "\000\010\002\031\027\142\030\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\031\022\154" +
    "\023\024\024\052\025\025\026\040\027\045\030\044\001" +
    "\001\000\002\001\001\000\026\002\031\020\156\021\034" +
    "\022\050\023\024\024\052\025\025\026\040\027\045\030" +
    "\044\001\001\000\002\001\001\000\042\002\031\012\160" +
    "\013\060\014\023\020\030\021\034\022\050\023\024\024" +
    "\052\025\025\026\040\027\045\030\044\032\037\033\053" +
    "\034\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\031\025\177" +
    "\026\040\027\045\030\044\001\001\000\014\002\031\025" +
    "\176\026\040\027\045\030\044\001\001\000\014\002\031" +
    "\025\175\026\040\027\045\030\044\001\001\000\012\002" +
    "\031\026\174\027\045\030\044\001\001\000\012\002\031" +
    "\026\173\027\045\030\044\001\001\000\014\002\031\025" +
    "\172\026\040\027\045\030\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public void syntax_error(Symbol token)
	{
		StringBuffer bf = new StringBuffer("[ERROR]");
			
		bf.append(" Line ");
		bf.append(token.left+1);
		bf.append(", column ");
		bf.append(token.right+1);
		bf.append(": " + token.toString());
					
		System.out.println(bf);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // constant ::= BOOLEAN 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // constant ::= STRING 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // constant ::= REAL 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // constant ::= INT 
            {
              ConstantExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_list ::= expr_list COLON expr 
            {
              List<Expression> RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> elist = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			    elist.add(e);
			    RESULT = elist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				RESULT = new Vector<Expression>(); 
				RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_expr ::= constant 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ConstantExpr c = (ConstantExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_expr ::= LPAR expr RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_expr ::= ID LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                     RESULT = new FunctionCall(id, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_expr ::= ID LPAR expr_list RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> elist = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                	RESULT = new FunctionCall(id, false, elist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_expr ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarExpr(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unary_expr ::= MINUS unary_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = new FunctionCall("_NNEG", true, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unary_expr ::= PLUS unary_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = new FunctionCall("_NUMID", true, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unary_expr ::= NEG unary_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = new FunctionCall("_LNEG", true, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unary_expr ::= simple_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // num_expr_mul ::= num_expr_mul MODULO unary_expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_DIVIDE", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // num_expr_mul ::= num_expr_mul DIVIDE unary_expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_DIVIDE", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // num_expr_mul ::= num_expr_mul TIMES unary_expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_TIMES", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // num_expr_mul ::= unary_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_mul",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // num_expr_add ::= num_expr_add MINUS num_expr_mul 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_SUB", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_add",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // num_expr_add ::= num_expr_add PLUS num_expr_mul 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_ADD", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_add",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // num_expr_add ::= num_expr_mul 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr_add",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_expr_rel ::= num_expr_add GTEQ num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_GTEQ", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_expr_rel ::= num_expr_add LTEQ num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_LTEQ", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_expr_rel ::= num_expr_add GT num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_GT", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_expr_rel ::= num_expr_add LT num_expr_add 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_LT", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_expr_rel ::= num_expr_add 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_rel",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bool_expr_cmp ::= bool_expr_cmp NEQEQ bool_expr_rel 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_NEQEQ", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_cmp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_expr_cmp ::= bool_expr_cmp EQEQ bool_expr_rel 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_EQEQ", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_cmp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_expr_cmp ::= bool_expr_rel 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_cmp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_expr_and ::= bool_expr_and LOGAND bool_expr_cmp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_LAND", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_and",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_expr_and ::= bool_expr_cmp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_and",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_expr_or ::= bool_expr_or LOGOR bool_expr_and 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      RESULT = new FunctionCall("_LOR", true, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_or",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_expr_or ::= bool_expr_and 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr_or",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= bool_expr_or 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declarator ::= ID EQUAL expr 
            {
              Pair<String,Expression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			        RESULT = new Pair<String,Expression>(id, e);
			        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declarator ::= ID 
            {
              Pair<String,Expression> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Pair<String,Expression>(id, Expression.NULL); 
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarator_list ::= declarator_list COLON declarator 
            {
              List<Pair<String,Expression>> RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Pair<String,Expression>> dlist = (List<Pair<String,Expression>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pair<String,Expression> d = (Pair<String,Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					    dlist.add(d);
					    RESULT = dlist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarator_list ::= declarator 
            {
              List<Pair<String,Expression>> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Pair<String,Expression> d = (Pair<String,Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					    RESULT = new Vector<Pair<String,Expression>>();
					    RESULT.add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_decl ::= TYPE declarator_list SEMI 
            {
              List<Declaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Pair<String,Expression>> dlist = (List<Pair<String,Expression>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			List<Declaration> nl = new Vector<Declaration>(dlist.size()); 					
			for(Pair<String, Expression> decl : dlist) {
				nl.add( new VarDecl(t, decl.first(), decl.second()));
			};
			RESULT = nl; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // complex_instr ::= LCURLY instr_list RCURLY 
            {
              ComplexInstr RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> ilist = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					RESULT = new ComplexInstr(ilist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_instr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // return_instr ::= RETURN expr SEMI 
            {
              ReturnInstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnInstr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_instr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // return_instr ::= RETURN SEMI 
            {
              ReturnInstr RESULT =null;
		 RESULT = new ReturnInstr(Expression.NULL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_instr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // loop_instr ::= FOR LPAR assign_instr SEMI expr SEMI assign_instr RPAR instr 
            {
              LoopInstr RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruction init = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int postleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction post = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction body = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			  	RESULT = new LoopInstr(e, body, init, post); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // loop_instr ::= WHILE LPAR expr RPAR instr 
            {
              LoopInstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				  RESULT = new LoopInstr(e, i, Instruction.EMPTY, Instruction.EMPTY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_instr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cond_instr ::= IF LPAR expr RPAR instr ELSE instr 
            {
              CondInstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction i1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			      RESULT = new CondInstr(e, i1, i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_instr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cond_instr ::= IF LPAR expr RPAR instr 
            {
              CondInstr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				  RESULT = new CondInstr(e, i, Instruction.EMPTY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_instr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assign_instr ::= ID MINUSMINUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				 	RESULT = new FunctionCall("_DEC", true, new VarExpr(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_instr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign_instr ::= ID PLUSPLUS 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				 	RESULT = new FunctionCall("_INC", true, new VarExpr(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_instr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign_instr ::= ID EQUAL expr 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new AssignmentInstr(id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_instr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= return_instr 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ReturnInstr i = (ReturnInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= loop_instr 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LoopInstr i = (LoopInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= cond_instr 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CondInstr i = (CondInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= assign_instr SEMI 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= expr SEMI 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= complex_instr 
            {
              Instruction RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexInstr ci = (ComplexInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ci; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr_list ::= instr_list var_decl 
            {
              List<Instruction> RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> ilist = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaration> vd = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   		RESULT = ilist;
			   		ilist.addAll(vd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr_list ::= instr_list instr 
            {
              List<Instruction> RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> ilist = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   		ilist.add(i);
			   		RESULT = ilist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instr_list ::= var_decl 
            {
              List<Instruction> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaration> vd = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   		RESULT = new Vector<Instruction>();
			   		RESULT.addAll(vd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instr_list ::= instr 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Vector<Instruction>();
					RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_decl ::= TYPE ID LPAR arg_dlist RPAR complex_instr 
            {
              FunctionDecl RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type rt = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ArgumentDecl> args = (List<ArgumentDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexInstr ci = (ComplexInstr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Type> type_list = new Vector<Type>();				
				for(ArgumentDecl d : args) {
				       type_list.add(d.getType());				       
				}
				FunctionType ft = new FunctionType(rt, type_list);				
				RESULT = new FunctionDecl(ft, fid, args, ci);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arg_decl ::= TYPE ID 
            {
              ArgumentDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentDecl(type, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arg_dlist_ne ::= arg_decl 
            {
              List<ArgumentDecl> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentDecl arg = (ArgumentDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Vector<ArgumentDecl>(); 
				                 RESULT.add(arg); 
				              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist_ne",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arg_dlist_ne ::= arg_dlist_ne COLON arg_decl 
            {
              List<ArgumentDecl> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ArgumentDecl> al = (List<ArgumentDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArgumentDecl arg = (ArgumentDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 al.add(arg); RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist_ne",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arg_dlist ::= 
            {
              List<ArgumentDecl> RESULT =null;
		 RESULT = new Vector<ArgumentDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arg_dlist ::= arg_dlist_ne 
            {
              List<ArgumentDecl> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ArgumentDecl> al = (List<ArgumentDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = al; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_dlist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_list ::= func_decl 
            {
              List<FunctionDecl> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDecl fd = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			    RESULT = new Vector<FunctionDecl>();
			    RESULT.add(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_list ::= func_list func_decl 
            {
              List<FunctionDecl> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionDecl> fl = (List<FunctionDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDecl fd = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				RESULT = fl;
				RESULT.add(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= func_list 
            {
              Program RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDecl> fl = (List<FunctionDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program("program", fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

